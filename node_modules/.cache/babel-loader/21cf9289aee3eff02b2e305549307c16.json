{"ast":null,"code":"import _defineProperty from \"/Users/yaroslawbagriy/Dev/ReactProjects/burger-builder-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/yaroslawbagriy/Dev/ReactProjects/burger-builder-app/src/containers/BurgerBuilder/BurgerBuilder.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport Aux from '../../hoc/Aux/Aux';\nimport Burger from '../../components/Burger/Burger';\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls';\nimport Modal from '../../components/UI/Modal/Modal';\nimport OrderSummary from '../../components/Burger/OrderSummary/OrderSummary';\nimport axios from '../../axios-orders';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nconst INGREDIENT_PRICES = {\n  salad: 0.5,\n  cheese: 0.4,\n  meat: 1.3,\n  bacon: 0.7\n};\n\nclass BurgerBuilder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ingredients: null,\n      totalPrice: 4,\n      purchasable: false,\n      purchasing: false,\n      loading: false,\n      error: null\n    };\n\n    this.addIngredientHandler = type => {\n      const oldCount = this.state.ingredients[type];\n      const updatedCount = oldCount + 1;\n\n      const updatedIngredients = _objectSpread({}, this.state.ingredients);\n\n      updatedIngredients[type] = updatedCount;\n      const priceAddition = INGREDIENT_PRICES[type];\n      const oldPrice = this.state.totalPrice;\n      const newPrice = oldPrice + priceAddition;\n      this.setState({\n        totalPrice: newPrice,\n        ingredients: updatedIngredients\n      });\n      this.updatePurchaseState(updatedIngredients);\n    };\n\n    this.removeIngredientHandler = type => {\n      const oldCount = this.state.ingredients[type];\n\n      if (oldCount <= 0) {\n        return;\n      }\n\n      const updatedCount = oldCount - 1;\n\n      const updatedIngredients = _objectSpread({}, this.state.ingredients);\n\n      updatedIngredients[type] = updatedCount;\n      const priceDeduction = INGREDIENT_PRICES[type];\n      const oldPrice = this.state.totalPrice;\n      const newPrice = oldPrice - priceDeduction;\n      this.setState({\n        totalPrice: newPrice,\n        ingredients: updatedIngredients\n      });\n      this.updatePurchaseState(updatedIngredients);\n    };\n\n    this.purchaseHandler = () => {\n      this.setState({\n        purchasing: true\n      });\n    };\n\n    this.purchaseCancelHandler = () => {\n      this.setState({\n        purchasing: false\n      });\n    };\n\n    this.purchaseContinueHandler = () => {\n      console.log('[BurgerBuilder] purchaseContinueHandler'); // this.setState({ loading: true });\n      // const order = {\n      //     ingredients: this.state.ingredients,\n      //     price: this.state.totalPrice,\n      //     customer: {\n      //         name: 'Max',\n      //         address: {\n      //             street: '123 Burger Street',\n      //             zipCode: '12345',\n      //             country: 'Burger'\n      //         },\n      //         email: 'burger@burger.com'\n      //     },\n      //     deliveryMethod: 'fastest'\n      // };\n      // axios.post('/orders.json', order)\n      //     .then(response => {\n      //          console.log(response);\n      //          this.setState({ loading: false, purchasing: false });\n      //     })\n      //     .catch(error => {\n      //         console.log(error);\n      //         this.setState({ loading: false, purchasing: false });\n      //     });\n\n      this.props.history.push();\n    };\n  }\n\n  // Typical use case is to load data in componentDidMount\n  componentDidMount() {\n    console.log(this.props);\n    axios.get('/ingredients.json').then(response => {\n      console.log('[BurgerBuilder] componentDidMount axios ingredients response');\n      this.setState({\n        ingredients: response.data\n      });\n    }).catch(error => {\n      this.setState({\n        error: true\n      });\n    });\n  }\n\n  updatePurchaseState(ingredients) {\n    const sum = Object.keys(ingredients).map(igKey => {\n      return ingredients[igKey];\n    }).reduce((sum, el) => {\n      return sum + el;\n    }, 0);\n    this.setState({\n      purchasable: sum > 0\n    });\n  }\n\n  render() {\n    const disabledInfo = _objectSpread({}, this.state.ingredients);\n\n    for (let key in disabledInfo) {\n      disabledInfo[key] = disabledInfo[key] <= 0;\n    }\n\n    ;\n    let orderSummary = null;\n    let burger = this.state.error ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"Ingredients can't be loaded!\") : React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    });\n\n    if (this.state.ingredients) {\n      burger = React.createElement(Aux, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(Burger, {\n        ingredients: this.state.ingredients,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }), React.createElement(BuildControls, {\n        ingredientAdded: this.addIngredientHandler,\n        ingredientDeducted: this.removeIngredientHandler,\n        disabled: disabledInfo,\n        purchasable: this.state.purchasable,\n        ordered: this.purchaseHandler,\n        price: this.state.totalPrice,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }));\n      orderSummary = React.createElement(OrderSummary, {\n        ingredients: this.state.ingredients,\n        price: this.state.totalPrice,\n        purchaseCancelled: this.purchaseCancelHandler,\n        purchaseContinued: this.purchaseContinueHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      });\n    }\n\n    if (this.state.loading) {\n      orderSummary = React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(Aux, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(Modal, {\n      show: this.state.purchasing,\n      modalClosed: this.purchaseCancelHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, orderSummary), burger);\n  }\n\n}\n\nexport default withErrorHandler(BurgerBuilder, axios);","map":{"version":3,"sources":["/Users/yaroslawbagriy/Dev/ReactProjects/burger-builder-app/src/containers/BurgerBuilder/BurgerBuilder.js"],"names":["React","Component","Aux","Burger","BuildControls","Modal","OrderSummary","axios","Spinner","withErrorHandler","INGREDIENT_PRICES","salad","cheese","meat","bacon","BurgerBuilder","state","ingredients","totalPrice","purchasable","purchasing","loading","error","addIngredientHandler","type","oldCount","updatedCount","updatedIngredients","priceAddition","oldPrice","newPrice","setState","updatePurchaseState","removeIngredientHandler","priceDeduction","purchaseHandler","purchaseCancelHandler","purchaseContinueHandler","console","log","props","history","push","componentDidMount","get","then","response","data","catch","sum","Object","keys","map","igKey","reduce","el","render","disabledInfo","key","orderSummary","burger"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport Aux from '../../hoc/Aux/Aux';\nimport Burger from '../../components/Burger/Burger';\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls';\nimport Modal from '../../components/UI/Modal/Modal';\nimport OrderSummary from '../../components/Burger/OrderSummary/OrderSummary';\nimport axios from '../../axios-orders';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\n\nconst INGREDIENT_PRICES = {\n    salad: 0.5,\n    cheese: 0.4,\n    meat: 1.3,\n    bacon: 0.7\n}; \n\nclass BurgerBuilder extends Component {\n    state = {\n        ingredients: null,\n        totalPrice: 4,\n        purchasable: false,\n        purchasing: false,\n        loading: false,\n        error: null \n    };\n\n    // Typical use case is to load data in componentDidMount\n    componentDidMount() {\n        console.log(this.props)\n        axios.get('/ingredients.json')\n            .then(response => {\n                console.log('[BurgerBuilder] componentDidMount axios ingredients response');\n                this.setState({ ingredients: response.data });\n            })\n            .catch(error => {\n                this.setState({ error: true });\n            });\n    }\n\n    updatePurchaseState(ingredients) {\n        const sum = Object.keys(ingredients).map(igKey => {\n            return ingredients[igKey];\n        }).reduce((sum, el) => {\n            return sum + el;\n        }, 0);\n        this.setState({purchasable: sum > 0});\n    }\n\n    addIngredientHandler = (type) => {\n        const oldCount = this.state.ingredients[type];\n        const updatedCount =  oldCount + 1;\n        const updatedIngredients = {\n            ...this.state.ingredients\n        };\n        updatedIngredients[type] = updatedCount;\n        const priceAddition = INGREDIENT_PRICES[type];\n        const oldPrice = this.state.totalPrice;\n        const newPrice = oldPrice + priceAddition;\n        this.setState({ totalPrice: newPrice, ingredients: updatedIngredients });\n        this.updatePurchaseState(updatedIngredients);\n    }\n\n    removeIngredientHandler = (type) => {\n        const oldCount = this.state.ingredients[type];\n        if (oldCount <= 0) {\n            return;\n        }\n        const updatedCount =  oldCount - 1;\n        const updatedIngredients = {\n            ...this.state.ingredients\n        };\n        updatedIngredients[type] = updatedCount;\n        const priceDeduction = INGREDIENT_PRICES[type];\n        const oldPrice = this.state.totalPrice;\n        const newPrice = oldPrice -  priceDeduction;\n        this.setState({ totalPrice: newPrice, ingredients: updatedIngredients });\n        this.updatePurchaseState(updatedIngredients);\n    }\n\n    purchaseHandler = () => {\n        this.setState({purchasing: true});\n    }\n\n    purchaseCancelHandler = () => {\n        this.setState({purchasing: false});\n    }\n\n    purchaseContinueHandler = () => {\n        console.log('[BurgerBuilder] purchaseContinueHandler');\n        // this.setState({ loading: true });\n\n        // const order = {\n        //     ingredients: this.state.ingredients,\n        //     price: this.state.totalPrice,\n        //     customer: {\n        //         name: 'Max',\n        //         address: {\n        //             street: '123 Burger Street',\n        //             zipCode: '12345',\n        //             country: 'Burger'\n        //         },\n        //         email: 'burger@burger.com'\n        //     },\n        //     deliveryMethod: 'fastest'\n        // };\n        // axios.post('/orders.json', order)\n        //     .then(response => {\n        //          console.log(response);\n        //          this.setState({ loading: false, purchasing: false });\n        //     })\n        //     .catch(error => {\n        //         console.log(error);\n        //         this.setState({ loading: false, purchasing: false });\n        //     });\n\n        this.props.history.push()\n    }\n\n    render() {\n        const disabledInfo = {\n            ...this.state.ingredients\n        };\n\n        for (let key in disabledInfo) {\n            disabledInfo[key] = disabledInfo[key] <= 0;\n        };\n\n        let orderSummary = null;\n\n        let burger = this.state.error ? <p>Ingredients can't be loaded!</p> : <Spinner />;\n\n        if (this.state.ingredients) {\n            burger = (\n                <Aux>\n                    <Burger ingredients={this.state.ingredients} />\n                    <BuildControls \n                        ingredientAdded={ this.addIngredientHandler }\n                        ingredientDeducted={ this.removeIngredientHandler }\n                        disabled={ disabledInfo }\n                        purchasable={ this.state.purchasable }\n                        ordered={ this.purchaseHandler }\n                        price={ this.state.totalPrice }\n                    />\n                </Aux>\n            );\n\n            orderSummary = (\n                <OrderSummary \n                    ingredients={ this.state.ingredients }\n                    price={ this.state.totalPrice }\n                    purchaseCancelled={ this.purchaseCancelHandler }\n                    purchaseContinued={ this.purchaseContinueHandler }\n                />\n            );\n        }\n\n        if (this.state.loading) {\n            orderSummary = <Spinner />;\n        }\n\n        return (\n        <Aux>\n            <Modal show={ this.state.purchasing } modalClosed={ this.purchaseCancelHandler }>\n                { orderSummary }\n            </Modal>\n            { burger }\n        </Aux>\n        );\n    }\n}\n\nexport default withErrorHandler(BurgerBuilder, axios);"]},"metadata":{},"sourceType":"module"}