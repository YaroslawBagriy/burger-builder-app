{"ast":null,"code":"var _jsxFileName = \"/Users/yaroslawbagriy/Dev/React/burger-builder-app/src/hoc/Layout/Layout.js\";\nimport React, { Component } from 'react';\nimport Aux from '../Aux/Aux';\nimport classes from './Layout.css';\nimport Toolbar from '../../components/Navigation/Toolbar/Toolbar'; // SideDrawer is in the Layout component since it\n// is a core part of the layout.\n\nimport SideDrawer from '../../components/Navigation/SideDrawer/SideDrawer';\n\nclass Layout extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      showSideDrawer: false\n    };\n\n    this.sideDrawerClosedHandler = () => {\n      this.setState({\n        showSideDrawer: false\n      });\n    };\n\n    this.sideDrawerToggleHandler = () => {\n      // Clean way to set state based on old state\n      this.setState(prevState => {\n        return {\n          showSideDrawer: !prevState.showSideDrawer\n        };\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(Aux, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, React.createElement(Toolbar, {\n      drawerToggleClicked: this.sideDrawerToggleHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }), React.createElement(SideDrawer, {\n      open: this.state.showSideDrawer,\n      closed: this.sideDrawerClosedHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }), React.createElement(\"main\", {\n      className: classes.Content,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, this.props.children));\n  }\n\n}\n\n;\nexport default Layout;","map":{"version":3,"sources":["/Users/yaroslawbagriy/Dev/React/burger-builder-app/src/hoc/Layout/Layout.js"],"names":["React","Component","Aux","classes","Toolbar","SideDrawer","Layout","state","showSideDrawer","sideDrawerClosedHandler","setState","sideDrawerToggleHandler","prevState","render","Content","props","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAkC,OAAlC;AAEA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,OAAP,MAAoB,6CAApB,C,CAEA;AACA;;AACA,OAAOC,UAAP,MAAuB,mDAAvB;;AAEA,MAAMC,MAAN,SAAqBL,SAArB,CAA+B;AAAA;AAAA;AAAA,SAE3BM,KAF2B,GAEnB;AACJC,MAAAA,cAAc,EAAE;AADZ,KAFmB;;AAAA,SAM3BC,uBAN2B,GAMD,MAAM;AAC5B,WAAKC,QAAL,CAAc;AAAEF,QAAAA,cAAc,EAAE;AAAlB,OAAd;AACH,KAR0B;;AAAA,SAU3BG,uBAV2B,GAUD,MAAM;AAC5B;AACA,WAAKD,QAAL,CAAeE,SAAD,IAAe;AACxB,eAAO;AAAEJ,UAAAA,cAAc,EAAE,CAACI,SAAS,CAACJ;AAA7B,SAAP;AACJ,OAFD;AAGH,KAf0B;AAAA;;AAiB3BK,EAAAA,MAAM,GAAI;AACN,WACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,OAAD;AAAS,MAAA,mBAAmB,EAAG,KAAKF,uBAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,UAAD;AACI,MAAA,IAAI,EAAG,KAAKJ,KAAL,CAAWC,cADtB;AAEI,MAAA,MAAM,EAAG,KAAKC,uBAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAMI;AAAM,MAAA,SAAS,EAAGN,OAAO,CAACW,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACM,KAAKC,KAAL,CAAWC,QADjB,CANJ,CADJ;AAYH;;AA9B0B;;AA+B9B;AAED,eAAeV,MAAf","sourcesContent":["import React, { Component  } from 'react';\n\nimport Aux from '../Aux/Aux';\nimport classes from './Layout.css';\nimport Toolbar from '../../components/Navigation/Toolbar/Toolbar';\n\n// SideDrawer is in the Layout component since it\n// is a core part of the layout.\nimport SideDrawer from '../../components/Navigation/SideDrawer/SideDrawer';\n \nclass Layout extends Component {\n\n    state = {\n        showSideDrawer: false \n    }\n\n    sideDrawerClosedHandler = () => {\n        this.setState({ showSideDrawer: false });\n    }\n    \n    sideDrawerToggleHandler = () => {\n        // Clean way to set state based on old state\n        this.setState((prevState) => {\n             return { showSideDrawer: !prevState.showSideDrawer };\n        });\n    }\n\n    render () {\n        return(\n            <Aux>\n                <Toolbar drawerToggleClicked={ this.sideDrawerToggleHandler  }/>\n                <SideDrawer\n                    open={ this.state.showSideDrawer }\n                    closed={ this.sideDrawerClosedHandler }\n                />\n                <main className={ classes.Content }>\n                    { this.props.children }\n                </main>\n            </Aux>\n        )\n    }\n};\n\nexport default Layout;"]},"metadata":{},"sourceType":"module"}